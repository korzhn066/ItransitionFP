<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - FinalProject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/FinalProject.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">FinalProject</a>

                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">@Localizer["Home"]</a>
                        </li>

                        @if (!Context!.User!.Identity!.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">@Localizer["Authorize"]</a>
                            </li>  
                        }

                        @if (Context!.User!.Identity!.IsAuthenticated) {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="UserCollections" 
                                    asp-route-username="@Context.User.Identity.Name">@Localizer["My collections"]</a>
                            </li>

                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="LogOut">@Localizer["LogOut"]</a>
                            </li>
                        }

                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Settings" asp-action="Settings">@Localizer["Settings"]</a>
                        </li>


                        

                        @if (Context.User.IsInRole("Admin")) {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="AdminPanel" asp-action="AdminPanel">@Localizer["Admin panel"]</a>
                            </li>
                        }
                    </ul>

                    @if (Context!.User!.Identity!.IsAuthenticated)
                    {
                        <button onclick="setProblemEmail()" style="margin-right: 10px;" type="button" class="btn btn-secondary"
                            data-bs-toggle="modal" data-bs-target="#problemModal">
                            Problem
                        </button>
                        
                    }

                    <div  class="dropdown">
                        <input oninput="getItems(this.value)" class="form-control mr-sm-2"  id="dropdownSearch" 
                            data-bs-toggle="dropdown" aria-expanded="false" placeholder="@Localizer["Search items"]">

                        <ul hidden id="items" class="dropdown-menu" aria-labelledby="dropdownSearch">
                            
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>

        
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        const items = document.getElementById("items")

        const getItems = (text) => {
            const url = "/Search/Search/?text=" + text
            let html = ""

            $.ajax({
                url: url,
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    items.hidden = false

                    if (data.result.length == 0) {
                        items.innerHTML = "<li>Nothing found</li>"
                        
                        return
                    }

                    data.result.forEach(item => {
                        if (item.resultType == 1) {
                            html += 
                            `
                                <li>
                                    <a href="/Item/Item?id=${item.id}" class="dropdown-item">@Localizer["Go to item"] ${item.name}</a>
                                </li>
                            `
                        }else{
                            html +=
                                `
                                    <li>
                                        <a href="/Collection/Collection?id=${item.id}" class="dropdown-item">@Localizer["Go to collection"] ${item.name}</a>
                                    </li>
                                `
                        }
                    })

                    items.innerHTML = html
                },
                error: (e) => {
                    console.log(e)
                }
            });
        }
    </script>
</body>
</html>

<div class="modal fade" id="problemModal" tabindex="-1" aria-labelledby="problemModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="problemModalLabel">
                    Report about problem
                </h5>

                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <input id="problemEmail" type="email" style="margin-bottom: 10px" class="form-control" placeholder="Email">
                <input id="problemDescribe" type="text" style="margin-bottom: 10px" class="form-control" placeholder="Describe problem">

                <select id="priority" class="form-select">
                    <option value="Low" selected>Low</option>
                    <option value="Middle">Middle</option>
                    <option value="High">High</option>
                </select>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

                <button type="button" onclick="sendProblem()" class="btn btn-secondary" data-bs-dismiss="modal">Send</button>
            </div>
        </div>
    </div>
</div>

<script>
    const problemEmail = document.getElementById("problemEmail")
    const problemDescribe = document.getElementById("problemDescribe")
    const priority = document.getElementById("priority")

    const sendProblem = async () => {
        const problemEmailValue = problemEmail.value
        const problemDescribeValue = problemDescribe.value
        const priorityValue = priority.value
        
        const collection = await getCollection()       
        const url = window.location.href
        
        await $.ajax({
            url: `/Jira/SendIssue?summary=${problemDescribeValue}&collection=${collection}&url=${url}&priority=${priorityValue}&email=${problemEmailValue}`,
            method: 'POST',
            dataType: 'json',
            success: function (data) {
            },
            error: function (error) {
            }
        })
    }

    const getCollection = async () => {
        let collection = "none"
        let id = window.location.href.split('/').pop()

        if (window.location.href.includes("Item/Item")) {
            await $.ajax({
                url: "/Collection/GetCollectionNameByItemId/?id=" + id.toString(),
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    collection = data.name
                },
                error: function (error) {
                }
            })
        }
        else if (window.location.href.includes("Collection/Collection")) {
            await $.ajax({
                url: "/Collection/GetCollectionNameByCollectionId/?id=" + id.toString(),
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    collection = data.name
                },
                error: function (error) {
                }

            })
        }

        return collection
    }

    const setProblemEmail = async () => {
        await $.ajax({
            url: "/Account/GetUserEmail",
            method: 'GET',
            dataType: 'json',
            success: function (data) {
                if (data.email != null) {
                    problemEmail.value = data.email
                    problemEmail.readOnly = true
                }
            },
            error: function (error) {
                console.log(error)
            }

        })
    }

    
</script>

